// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	io "io"

	osauth "github.com/shellhub-io/shellhub/pkg/agent/pkg/osauth"
	mock "github.com/stretchr/testify/mock"
)

// OSAuther is an autogenerated mock type for the OSAuther type
type OSAuther struct {
	mock.Mock
}

// AuthUser provides a mock function with given fields: username, password
func (_m *OSAuther) AuthUser(username string, password string) bool {
	ret := _m.Called(username, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuthUserFromShadow provides a mock function with given fields: username, password, shadow
func (_m *OSAuther) AuthUserFromShadow(username string, password string, shadow io.Reader) bool {
	ret := _m.Called(username, password, shadow)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) bool); ok {
		r0 = rf(username, password, shadow)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LookupUser provides a mock function with given fields: username
func (_m *OSAuther) LookupUser(username string) *osauth.User {
	ret := _m.Called(username)

	var r0 *osauth.User
	if rf, ok := ret.Get(0).(func(string) *osauth.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osauth.User)
		}
	}

	return r0
}

// LookupUserFromPasswd provides a mock function with given fields: username, passwd
func (_m *OSAuther) LookupUserFromPasswd(username string, passwd io.Reader) (*osauth.User, error) {
	ret := _m.Called(username, passwd)

	var r0 *osauth.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, io.Reader) (*osauth.User, error)); ok {
		return rf(username, passwd)
	}
	if rf, ok := ret.Get(0).(func(string, io.Reader) *osauth.User); ok {
		r0 = rf(username, passwd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osauth.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, io.Reader) error); ok {
		r1 = rf(username, passwd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPasswordHash provides a mock function with given fields: hash, password
func (_m *OSAuther) VerifyPasswordHash(hash string, password string) bool {
	ret := _m.Called(hash, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hash, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewOSAuther interface {
	mock.TestingT
	Cleanup(func())
}

// NewOSAuther creates a new instance of OSAuther. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOSAuther(t mockConstructorTestingTNewOSAuther) *OSAuther {
	mock := &OSAuther{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
